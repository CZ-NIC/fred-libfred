macro(set_default __VARIABLE_NAME __VARIABLE_VALUE)
    if(NOT ${__VARIABLE_NAME})
        #message("DEBUG ${__VARIABLE_NAME} NOT SET, SET TO ${__VARIABLE_VALUE}")
        set(${__VARIABLE_NAME} ${__VARIABLE_VALUE} ${ARGN})
    #else()
        #message("DEBUG ${__VARIABLE_NAME} SET TO ${${__VARIABLE_NAME}}, DO NOT SET TO ${__VARIABLE_VALUE}")
    endif()
endmacro()

macro(set_to_parent_scope_if_exists __VARIABLE_NAME __VARIABLE_VALUE)
    if(${__VARIABLE_NAME})
        set(${__VARIABLE_NAME} ${__VARIABLE_VALUE} PARENT_SCOPE)
    endif()
endmacro()

macro(set_to_parent_scope_recursively __DEPENDENCY)
    # <options> <one_value_args> <multi_value_args>
    cmake_parse_arguments(_ "" "INDENT" "SUFFIXES" ${ARGN})
    string(TOUPPER "${__DEPENDENCY}" _dependency_upper_case)
    foreach(suffix ${__SUFFIXES})
        set_to_parent_scope_if_exists(${_dependency_upper_case}_${suffix} "${${_dependency_upper_case}_${suffix}}")
        #message("${__INDENT} set ${_dependency_upper_case}_${suffix} ${${_dependency_upper_case}_${suffix}}")
    endforeach()
    foreach(_dependency_dependency ${${_dependency_upper_case}_DEPENDENCIES})
        set(__INDENT "${__INDENT}\t")
        foreach(suffix ${__SUFFIXES})
            set_to_parent_scope_recursively(${_dependency_dependency} SUFFIXES ${__SUFFIXES} INDENT "${__INDENT}")
        endforeach()
    endforeach()
endmacro()

function(configure_package_dependency __DEPENDENCY)
    # <options> <one_value_args> <multi_value_args>
    cmake_parse_arguments(_ "" "SRC_DIR;METHOD" "" ${ARGN})
    string(TOUPPER "${__DEPENDENCY}" dependency_upper_case)
    if(${dependency_upper_case}_CONFIGURED)
        return()
    endif()
    set(${dependency_upper_case}_CONFIGURED "CONFIGURED" PARENT_SCOPE)
    set_default(__SRC_DIR "${${dependency_upper_case}_DIR}")
    set_default(__METHOD "ADD_SUBDIRECTORY")
    if("${__SRC_DIR}" STREQUAL "")
        message(FATAL_ERROR "cannot add ${__DEPENDENCY}; use -D${dependency_upper_case}_DIR=<path> to specify location of ${__DEPENDENCY}")
        return()
    else()
        if(NOT IS_ABSOLUTE ${__SRC_DIR})
            set(__SRC_DIR "${CMAKE_SOURCE_DIR}/${__SRC_DIR}")
        endif()
        if("${__METHOD}" STREQUAL "ADD_SUBDIRECTORY")
            if(NOT EXISTS ${__SRC_DIR}/CMakeLists.txt)
                message(FATAL_ERROR "no ${__SRC_DIR}/CMakeLists.txt file found; ${dependency_upper_case}_DIR "
                                    "does not refer location of ${__DEPENDENCY}")
                return()
            endif()
        elseif("${__METHOD}" STREQUAL "INCLUDE")
            if(NOT EXISTS ${__SRC_DIR})
                message(FATAL_ERROR "no ${__SRC_DIR} file found; ${dependency_upper_case}_DIR "
                                    "does not refer location of ${__DEPENDENCY}")
                return()
            endif()
        else()
            message(FATAL_ERROR "configure_package_dependency: unknown METHOD \"${__METHOD}\"")
        endif()
    endif()
    message(STATUS "${PACKAGE_NAME}: Found dependency ${__DEPENDENCY}: ${__SRC_DIR}")
    set(${dependency_upper_case}_DIR ${__SRC_DIR} CACHE PATH "Location of ${__DEPENDENCY}")
    string(TOUPPER "${PACKAGE_NAME}" package_name_upper_case)
    list(APPEND ${package_name_upper_case}_DEPENDENCIES "${__DEPENDENCY}")
    set(${package_name_upper_case}_DEPENDENCIES "${${package_name_upper_case}_DEPENDENCIES}" PARENT_SCOPE)
endfunction()

macro(add_package_dependency __DEPENDENCY)
    # <options> <one_value_args> <multi_value_args>
    cmake_parse_arguments(_ "" "DST_RELATIVE_DIR;METHOD" "" ${ARGN})
    set_default(__METHOD "ADD_SUBDIRECTORY")
    string(TOUPPER "${__DEPENDENCY}" dependency_upper_case)
    if(NOT ${dependency_upper_case}_VERSION)
        if(NOT ${dependency_upper_case}_DIR)
            message(FATAL_ERROR "${PACKAGE_NAME}: ${dependency_upper_case}_DIR not set.")
        endif()
        string(TOUPPER "${PACKAGE_NAME}" package_name_upper_case)
        set_default(${package_name_upper_case}_PREFIX ${PACKAGE_TARNAME})
        set_default(${dependency_upper_case}_PREFIX ${${package_name_upper_case}_PREFIX}/${__DST_RELATIVE_DIR})
        message(STATUS "${PACKAGE_NAME}: Adding dependency ${__DEPENDENCY}")
        if("${__METHOD}" STREQUAL "ADD_SUBDIRECTORY")
            add_subdirectory("${${dependency_upper_case}_DIR}" "${CMAKE_CURRENT_BINARY_DIR}/${__DST_RELATIVE_DIR}" EXCLUDE_FROM_ALL)
        elseif("${__METHOD}" STREQUAL "INCLUDE")
            include("${${dependency_upper_case}_DIR}" OPTIONAL RESULT_VARIABLE _found)
            if("${_found}" STREQUAL "NOTFOUND")
                message(FATAL_ERROR "${PACKAGE_NAME}: Adding dependency ${__DEPENDENCY} failed: include file \"${${dependency_upper_case}_DIR}\" not found.")
            endif()
            get_filename_component(_dir "${${dependency_upper_case}_DIR}" DIRECTORY)
            provide_package_dependency_dist(${__DEPENDENCY} SRC_DIR "${_dir}" DST_RELATIVE_DIR "${__DST_RELATIVE_DIR}")
        else()
            message(FATAL_ERROR "add_package_dependency: unknown METHOD \"${__METHOD}\"")
        endif()
        message(STATUS "${PACKAGE_NAME}: Added dependency ${__DEPENDENCY} version: ${${dependency_upper_case}_VERSION}")
        get_directory_property(_has_parent "PARENT_DIRECTORY")
        if(_has_parent)
            set_to_parent_scope_recursively(${__DEPENDENCY} SUFFIXES "VERSION;DEPENDENCIES")
        endif()
    else()
        message(STATUS "${PACKAGE_NAME}: ${__DEPENDENCY} already added, version: ${${dependency_upper_case}_VERSION}, ${dependency_upper_case}_DIR: ${${dependency_upper_case}_DIR}")
    endif()
endmacro()

macro(add_package_dependencies)
    # <options> <one_value_args> <multi_value_args>
    cmake_parse_arguments(_ "" "FROM_FILE" "" ${ARGN})
    if(NOT IS_ABSOLUTE ${__FROM_FILE})
        set(__FROM_FILE "${CMAKE_CURRENT_SOURCE_DIR}/${__FROM_FILE}")
    endif()
    if(NOT EXISTS "${__FROM_FILE}")
        message(FATAL_ERROR "${PACKAGE_NAME}: FROM_FILE \"${__FROM_FILE}\": file not found.")
    endif()
    file(STRINGS ${__FROM_FILE} _LINES REGEX "^[ \t]*[^# \t][^ \t]*[ \t]+[^ \t]+[ \t]+[^ \t].*$")
    foreach(LINE ${_LINES})
        string(REPLACE " " ";" LINE_ITEMS ${LINE})
        list(GET LINE_ITEMS 0 _dependency_repository)
        list(GET LINE_ITEMS 1 _dependency_commitish)
        list(GET LINE_ITEMS 2 _dependency_clone_path)
        get_filename_component(_dependency "${_dependency_repository}" NAME)
        string(REGEX MATCH "^.*/api/${_dependency}$" _is_api "${_dependency_repository}")
        if("${_is_api}" STREQUAL "")
            set(_method "ADD_SUBDIRECTORY")
            string(TOUPPER "${_dependency}" dependency_upper_case)
            set(${dependency_upper_case}_DIR "${_dependency_clone_path}" CACHE PATH "Location of ${_dependency}")
        else()
            set(_dependency "api_${_dependency}")
            string(TOUPPER "${_dependency}" dependency_upper_case)
            set(_method "INCLUDE")
            foreach(_includefile "CMakeLists.cmake" "cmake/c++.cmake" "cmake/cpp.cmake")
                message(STATUS "${PACKAGE_NAME}: Trying \"${CMAKE_CURRENT_SOURCE_DIR}/${_dependency_clone_path}/${_includefile}\"...")
                if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/${_dependency_clone_path}/${_includefile}")
                    message(STATUS "Found include file of ${_dependency} \"${CMAKE_CURRENT_SOURCE_DIR}/${_dependency_clone_path}/${_includefile}\"...")
                    set(${dependency_upper_case}_DIR "${CMAKE_CURRENT_SOURCE_DIR}/${_dependency_clone_path}/${_includefile}" CACHE FILEPATH "Include file of ${_dependency}")
                    break()
                endif()
            endforeach()
        endif()
        configure_package_dependency(${_dependency} METHOD "${_method}")
    endforeach()
    string(TOUPPER "${PACKAGE_NAME}" package_name_upper_case)
    foreach(LINE ${_LINES})
        string(REPLACE " " ";" LINE_ITEMS ${LINE})
        list(GET LINE_ITEMS 0 _dependency_repository)
        list(GET LINE_ITEMS 1 _dependency_commitish)
        list(GET LINE_ITEMS 2 _dependency_clone_path)
        get_filename_component(_dependency "${_dependency_repository}" NAME)
        string(REGEX MATCH "^.*/api/${_dependency}$" _is_api "${_dependency_repository}")
        if("${_is_api}" STREQUAL "")
            set(_method "ADD_SUBDIRECTORY")
        else()
            set(_dependency "api_${_dependency}")
            set(_method "INCLUDE")
        endif()
        if("${_dependency}" IN_LIST ${package_name_upper_case}_DEPENDENCIES)
            add_package_dependency(${_dependency} DST_RELATIVE_DIR "${_dependency_clone_path}" METHOD "${_method}")
        endif()
    endforeach()
    get_directory_property(_has_parent "PARENT_DIRECTORY")
    if(_has_parent)
        set_to_parent_scope_recursively(${package_name_upper_case} SUFFIXES "VERSION;DEPENDENCIES")
    endif()
endmacro()

function(provide_package_dependency_dist __DEPENDENCY)
    # <options> <one_value_args> <multi_value_args>
    cmake_parse_arguments(_ "" "SRC_DIR;DST_RELATIVE_DIR" "" ${ARGN})
    find_program(GIT_PROGRAM git)
    if(EXISTS ${CMAKE_SOURCE_DIR}/.git AND GIT_PROGRAM)
        string(TOUPPER "${PACKAGE_NAME}" package_name_upper_case)
        string(TOLOWER "${__DEPENDENCY}" dependency_lower_case)
        set_default(${package_name_upper_case}_PREFIX "${PACKAGE_TARNAME}")
        set_default(${package_name_upper_case}_DIR "${CMAKE_CURRENT_SOURCE_DIR}")
        if (NOT TARGET dist_${dependency_lower_case})
            add_custom_target(dist_${dependency_lower_case}
                COMMAND ${GIT_PROGRAM} archive --format=tar --prefix=${${package_name_upper_case}_PREFIX}/${__DST_RELATIVE_DIR}/ HEAD > ${CMAKE_BINARY_DIR}/.${dependency_lower_case}.tar
                WORKING_DIRECTORY ${__SRC_DIR}/)
        endif()
    endif()
    string(TOUPPER "${PACKAGE_NAME}" package_name_upper_case)
    list(APPEND ${package_name_upper_case}_DEPENDENCIES "${__DEPENDENCY}")
    set(${package_name_upper_case}_DEPENDENCIES "${${package_name_upper_case}_DEPENDENCIES}" PARENT_SCOPE)
endfunction()

function(list_package_dependencies)
    message(STATUS "${PACKAGE_NAME} dependencies:")
    string(TOUPPER "${PACKAGE_NAME}" package_name_upper_case)
    foreach(dependency ${${package_name_upper_case}_DEPENDENCIES})
        message(STATUS "\t${dependency}")
    endforeach()
endfunction()

function(list_package_dependencies_recursive __DEPENDENCY)
    # <options> <one_value_args> <multi_value_args>
    cmake_parse_arguments(_ "" "INDENT" "" ${ARGN})
    string(TOUPPER "${__DEPENDENCY}" dependency_upper_case)
    if(NOT listed_dependencies)
        message(STATUS "${__DEPENDENCY} dependencies (recursive):")
    endif()
    foreach(dependency_dependency ${${dependency_upper_case}_DEPENDENCIES})
        string(TOUPPER "${dependency_dependency}" dependency_dependency_upper_case)
        if("${dependency_dependency_upper_case}" IN_LIST listed_dependencies)
            message(STATUS "|${__INDENT}-${dependency_dependency}")
        else()
            message(STATUS "|${__INDENT}-${dependency_dependency} (${${dependency_dependency_upper_case}_DIR})")
            list(APPEND listed_dependencies "${dependency_dependency_upper_case}")
            set(listed_dependencies "${listed_dependencies}" PARENT_SCOPE)
        endif()
        list_package_dependencies_recursive("${dependency_dependency}" INDENT "${__INDENT}\t")
    endforeach()
endfunction()
