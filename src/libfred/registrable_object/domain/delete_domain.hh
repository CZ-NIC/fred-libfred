/*
 * Copyright (C) 2018-2021  CZ.NIC, z. s. p. o.
 *
 * This file is part of FRED.
 *
 * FRED is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * FRED is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with FRED.  If not, see <https://www.gnu.org/licenses/>.
 */
/**
 *  @file delete_domain.h
 *  domain delete
 */

#ifndef DELETE_DOMAIN_HH_F00B0682E1C1442D81125CBE1CBF56E0
#define DELETE_DOMAIN_HH_F00B0682E1C1442D81125CBE1CBF56E0

#include "libfred/opexception.hh"
#include "libfred/opcontext.hh"
#include "util/printable.hh"

#include <string>

namespace LibFred {

/**
 * Delete of domain.
 * Fully qualified domain name of domain to be deleted is set via constructor.
 * Delete is executed by @ref exec method with database connection supplied in @ref OperationContext parameter.
 * In case of wrong input data or other predictable and superable failure, an instance of @ref DeleteDomainByFqdn::Exception is thrown with appropriate attributes set.
 * In case of other insuperable failures and inconsistencies, an instance of @ref InternalError or other exception is thrown.
 */
class DeleteDomainByFqdn : public Util::Printable<DeleteDomainByFqdn>
{
public:
    DECLARE_EXCEPTION_DATA(unknown_domain_fqdn, std::string);/**< exception members for unknown fully qualified domain name generated by macro @ref DECLARE_EXCEPTION_DATA*/
    struct Exception
    : virtual LibFred::OperationException
    , ExceptionData_unknown_domain_fqdn<Exception>
    {};

    /**
    * Delete domain constructor with mandatory parameter.
    * @param fqdn sets fully qualified domain name into @ref fqdn_ attribute
    */
    DeleteDomainByFqdn(const std::string& fqdn);

    /**
    * Executes delete.
    * @param ctx contains reference to database and logging interface
    */
    void exec(const OperationContext& ctx);

    /**
    * Dumps state of the instance into the string
    * @return string with description of the instance state
    */
    std::string to_string()const;
private:
    const std::string fqdn_;/**< fully qualified domain name */
};

/**
* Delete of domain.
* Id of domain to be deleted is set via constructor.
* Delete is executed by @ref exec method with database connection supplied in @ref OperationContext parameter.
* In case of wrong input data or other predictable and superable failure, an instance of @ref DeleteDomainById::Exception is thrown with appropriate attributes set.
* In case of other insuperable failures and inconsistencies, an instance of @ref InternalError or other exception is thrown.
*/
class DeleteDomainById : public Util::Printable<DeleteDomainById>
{
public:
    DECLARE_EXCEPTION_DATA(unknown_domain_id, unsigned long long);/**< exception members for unknown domain id generated by macro @ref DECLARE_EXCEPTION_DATA*/
    struct Exception
    : virtual LibFred::OperationException
    , ExceptionData_unknown_domain_id<Exception>
    {};

    /**
    * Delete domain constructor with mandatory parameter.
    * @param id sets domain id into @ref id_ attribute
    */
    DeleteDomainById(unsigned long long id);

    /**
    * Executes delete.
    * @param ctx contains reference to database and logging interface
    */
    void exec(const OperationContext& ctx);

    /**
    * Dumps state of the instance into the string
    * @return string with description of the instance state
    */
    std::string to_string()const;
private:
    const unsigned long long id_;   /**< domain id */
};

}//namespace LibFred

#endif//DELETE_DOMAIN_HH_F00B0682E1C1442D81125CBE1CBF56E0
