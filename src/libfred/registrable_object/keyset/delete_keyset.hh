/*
 * Copyright (C) 2018-2019  CZ.NIC, z. s. p. o.
 *
 * This file is part of FRED.
 *
 * FRED is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * FRED is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with FRED.  If not, see <https://www.gnu.org/licenses/>.
 */
/**
 *  @file
 *  keyset delete
 */

#ifndef DELETE_KEYSET_HH_ADBDE88BAD844C238D381A3FBA4C7C9E
#define DELETE_KEYSET_HH_ADBDE88BAD844C238D381A3FBA4C7C9E

#include <string>

#include "libfred/opexception.hh"
#include "libfred/opcontext.hh"
#include "util/printable.hh"

namespace LibFred {

/**
* Delete of keyset.
* Keyset handle to delete is set via constructor.
* Delete is executed by @ref exec method with database connection supplied in @ref OperationContext parameter.
* In case of wrong input data or other predictable and superable failure, an instance of @ref DeleteKeysetHandle::Exception is thrown with appropriate attributes set.
* In case of other insuperable failures and inconsistencies, an instance of @ref InternalError or other exception is thrown.
*/
class DeleteKeysetByHandle : public Util::Printable<DeleteKeysetByHandle>
{
public:
    DECLARE_EXCEPTION_DATA(unknown_keyset_handle, std::string);/**< exception members for unknown keyset handle generated by macro @ref DECLARE_EXCEPTION_DATA*/
    DECLARE_EXCEPTION_DATA(object_linked_to_keyset_handle, std::string);/**< exception members for keyset linked to other object generated by macro @ref DECLARE_EXCEPTION_DATA*/
    struct Exception
    : virtual LibFred::OperationException
    , ExceptionData_unknown_keyset_handle<Exception>
    , ExceptionData_object_linked_to_keyset_handle<Exception>
    {};
    /**
    * Delete keyset constructor with mandatory parameter.
    * @param handle sets keyset identifier into @ref handle_ attribute
    */
    DeleteKeysetByHandle(const std::string& handle);

    /**
    * Executes delete.
    * @param ctx contains reference to database and logging interface
    */
    void exec(OperationContext& ctx);

    /**
    * Dumps state of the instance into the string
    * @return string with description of the instance state
    */
    std::string to_string()const;
private:
    const std::string handle_;/**< keyset identifier */
};

/**
* Delete of keyset.
* Id of keyset to delete is set via constructor.
* Delete is executed by @ref exec method with database connection supplied in @ref OperationContext parameter.
* In case of wrong input data or other predictable and superable failure, an instance of @ref DeleteKeysetId::Exception is thrown with appropriate attributes set.
* In case of other insuperable failures and inconsistencies, an instance of @ref InternalError or other exception is thrown.
*/
class DeleteKeysetById : public Util::Printable<DeleteKeysetById>
{
public:
    DECLARE_EXCEPTION_DATA(unknown_keyset_id, unsigned long long);/**< exception members for unknown keyset id generated by macro @ref DECLARE_EXCEPTION_DATA*/
    DECLARE_EXCEPTION_DATA(object_linked_to_keyset_id, unsigned long long);/**< exception members for keyset linked to other object generated by macro @ref DECLARE_EXCEPTION_DATA*/
    struct Exception
    : virtual LibFred::OperationException
    , ExceptionData_unknown_keyset_id<Exception>
    , ExceptionData_object_linked_to_keyset_id<Exception>
    {};
    /**
    * Delete keyset constructor with mandatory parameter.
    * @param id sets keyset identifier into @ref id_ attribute
    */
    DeleteKeysetById(unsigned long long id_);

    /**
    * Executes delete.
    * @param ctx contains reference to database and logging interface
    */
    void exec(OperationContext& ctx);

    /**
    * Dumps state of the instance into the string
    * @return string with description of the instance state
    */
    std::string to_string()const;
private:
    const unsigned long long id_;/**< keyset identifier */
};

}//namespace LibFred

#endif//DELETE_KEYSET_HH_ADBDE88BAD844C238D381A3FBA4C7C9E
