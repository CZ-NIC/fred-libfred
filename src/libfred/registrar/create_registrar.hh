/*
 * Copyright (C) 2018-2022  CZ.NIC, z. s. p. o.
 *
 * This file is part of FRED.
 *
 * FRED is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * FRED is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with FRED.  If not, see <https://www.gnu.org/licenses/>.
 */

#ifndef CREATE_REGISTRAR_HH_CACD883DD227451DABDDB6A9619C8954
#define CREATE_REGISTRAR_HH_CACD883DD227451DABDDB6A9619C8954

#include "libfred/opexception.hh"
#include "libfred/opcontext.hh"

#include "util/optional_value.hh"
#include "util/printable.hh"

#include <string>
#include <vector>

namespace LibFred {

/**
* Create of registrar.
* Created instance is modifiable by chainable methods i.e. methods returning instance reference.
* Data set into instance by constructor and methods serve as input data of the create.
* Create is executed by @ref exec method with database connection supplied in @ref OperationContext parameter.
* In case of wrong input data or other predictable and superable failure, an instance of @ref CreateRegistrar::Exception is thrown with appropriate attributes set.
* In case of other insuperable failures and inconsistencies, an instance of @ref InternalError or other exception is thrown.
*/
class CreateRegistrar : public Util::Printable<CreateRegistrar>
{
public:
    DECLARE_EXCEPTION_DATA(invalid_registrar_handle, std::string);/**< exception members for invalid registrar handle generated by macro @ref DECLARE_EXCEPTION_DATA*/
    DECLARE_EXCEPTION_DATA(invalid_registrar_varsymb, std::string);/**< exception members for invalid registrar varsymb generated by macro @ref DECLARE_EXCEPTION_DATA*/
    DECLARE_EXCEPTION_DATA(unknown_country, std::string);/**< exception members for unknown country generated by macro @ref DECLARE_EXCEPTION_DATA*/
    DECLARE_EXCEPTION_DATA(missing_mandatory_attribute, std::string);/**< exception member for missing attribute value generated by macro @ref DECLARE_EXCEPTION_DATA*/
    DECLARE_EXCEPTION_DATA(too_many_streets, std::size_t);/**< exception member in case of more than 3 streets*/
    struct Exception : virtual LibFred::OperationException,
                       ExceptionData_invalid_registrar_handle<Exception>,
                       ExceptionData_invalid_registrar_varsymb<Exception>,
                       ExceptionData_unknown_country<Exception>,
                       ExceptionData_missing_mandatory_attribute<Exception>,
                       ExceptionData_too_many_streets<Exception>
    {};

    /**
     * Create registrar constructor with all mandatory attributes.
     * @param handle sets registrar identifier
     * @param name sets name of registrar person
     * @param organization sets full trade name of organization
     * @param street sets street part of address
     * @param city sets city part of address
     * @param postalcode sets postalcode part of address
     * @param telephone sets telephone number
     * @param email sets e-mail address
     * @param url sets web address
     * @param dic sets taxpayer identification number
     * @param system sets system registrar flag
     * @param is_internal sets internal registrar flag
     */
    CreateRegistrar(
            std::string handle,
            std::string name,
            std::string organization,
            std::vector<std::string> street,
            std::string city,
            std::string postalcode,
            std::string telephone,
            std::string email,
            std::string url,
            std::string dic,
            bool system = false,
            bool is_internal = false);

    /**
     * Create registrar constructor with all attributes.
     * @param handle sets registrar identifier into @ref handle_ attribute
     * @param name sets name of registrar person into @ref name_ attribute
     * @param organization sets full trade name of organization into @ref organization_ attribute
     * @param street sets street part of address
     * @param city sets part of address - city into @ref city_ attribute
     * @param stateorprovince sets part of address - region into @ref stateorprovince_ attribute
     * @param postalcode sets part of address - postal code into @ref postalcode_ attribute
     * @param country sets two character country code or country name  into @ref country_ attribute
     * @param telephone sets telephone number into @ref telephone_ attribute
     * @param fax sets fax number into @ref fax_ attribute
     * @param email sets e-mail address into @ref email_ attribute
     * @param url sets web address into @ref url_ attribute
     * @param system sets system registrar flag into @ref system_ attribute
     * @param ico sets company registration number into @ref ico_ attribute
     * @param dic sets taxpayer identification number into @ref dic_ attribute
     * @param variable_symbol sets payments coupling tag into @ref variable_symbol_ attribute
     * @param payment_memo_regex sets alternative payment coupling expression into @ref payment_memo_regex_ attribute
     * @param vat_payer sets VAT payer flag into @ref vat_payer_ attribute
     * @param is_internal sets internal registrar flag
     */
    CreateRegistrar(
            std::string handle,
            std::string name,
            std::string organization,
            std::vector<std::string> street,
            std::string city,
            const Optional<std::string>& stateorprovince,
            std::string postalcode,
            const Optional<std::string>& country,
            std::string telephone,
            const Optional<std::string>& fax,
            std::string email,
            std::string url,
            bool system,
            const Optional<std::string>& ico,
            std::string dic,
            const Optional<std::string>& variable_symbol,
            const Optional<std::string>& payment_memo_regex,
            const Optional<bool>& vat_payer,
            bool is_internal);

    /**
     * Sets registrar name.
     * @param name sets name of registrar person
     * @return operation instance reference to allow method chaining
     */
    CreateRegistrar& set_name(std::string name);

    /**
     * Sets registrar organization name.
     * @param organization sets full trade name of organization
     * @return operation instance reference to allow method chaining
     */
    CreateRegistrar& set_organization(std::string organization);

    /**
     * Sets registrar street part of address.
     * @param street sets street part of address
     * @return operation instance reference to allow method chaining
     */
    CreateRegistrar& set_street(std::vector<std::string> street);

    /**
     * Sets registrar street1 part of address.
     * @param street1 sets street1 part of address
     * @return operation instance reference to allow method chaining
     */
    CreateRegistrar& set_street(std::string street1);

    /**
     * Sets registrar street1 and street2 parts of address.
     * @param street1 sets street1 part of address
     * @param street2 sets street2 part of address
     * @return operation instance reference to allow method chaining
     */
    CreateRegistrar& set_street(std::string street1, std::string street2);

    /**
     * Sets registrar street1, street2 and street3 parts of address.
     * @param street1 sets street1 part of address
     * @param street2 sets street2 part of address
     * @param street3 sets street3 part of address
     * @return operation instance reference to allow method chaining
     */
    CreateRegistrar& set_street(std::string street1, std::string street2, std::string street3);

    /**
     * Sets registrar city part of address.
     * @param city sets city part of address
     * @return operation instance reference to allow method chaining
     */
    CreateRegistrar& set_city(std::string city);

    /**
     * Sets registrar region part of address.
     * @param stateorprovince sets part of address - region
     * @return operation instance reference to allow method chaining
     */
    CreateRegistrar& set_stateorprovince(const std::string& stateorprovince);

    /**
     * Sets registrar postal code part of address.
     * @param postalcode sets postal code part of address
     * @return operation instance reference to allow method chaining
     */
    CreateRegistrar& set_postalcode(std::string postalcode);

    /**
     * Sets registrar country part of address.
     * @param country sets two character country code or country name
     * @return operation instance reference to allow method chaining
     */
    CreateRegistrar& set_country(const std::string& country);

    /**
     * Sets registrar telephone number.
     * @param telephone sets telephone number
     * @return operation instance reference to allow method chaining
     */
    CreateRegistrar& set_telephone(std::string telephone);

    /**
     * Sets registrar fax number.
     * @param fax sets fax number
     * @return operation instance reference to allow method chaining
     */
    CreateRegistrar& set_fax(const std::string& fax);

    /**
     * Sets registrar e-mail address.
     * @param email sets e-mail address
     * @return operation instance reference to allow method chaining
     */
    CreateRegistrar& set_email(std::string email);

    /**
     * Sets registrar web address.
     * @param url sets web address
     * @return operation instance reference to allow method chaining
     */
    CreateRegistrar& set_url(std::string url);

    /**
     * Sets system registrar flag.
     * @param system sets system registrar flag
     * @return operation instance reference to allow method chaining
     */
    CreateRegistrar& set_system(bool system);

    /**
     * Sets registrar company registration number.
     * @param ico sets company registration number
     * @return operation instance reference to allow method chaining
     */
    CreateRegistrar& set_ico(const std::string& ico);

    /**
     * Sets taxpayer identification number.
     * @param dic sets taxpayer identification number
     * @return operation instance reference to allow method chaining
     */
    CreateRegistrar& set_dic(std::string dic);

    /**
     * Sets payments coupling tag.
     * @param variable_symbol sets payments coupling tag
     * @return operation instance reference to allow method chaining
     */
    CreateRegistrar& set_variable_symbol(const std::string& variable_symbol);

    /**
     * Sets alternative payment coupling expression.
     * @param payment_memo_regex sets alternative payment coupling expression
     * @return operation instance reference to allow method chaining
     */
    CreateRegistrar& set_payment_memo_regex(const std::string& payment_memo_regex);

    /**
     * Sets VAT payer flag.
     * @param vat_payer sets VAT payer flag
     * @return operation instance reference to allow method chaining
     */
    CreateRegistrar& set_vat_payer(bool vat_payer);

    /**
     * Sets internal registrar flag.
     * @param system sets internal registrar flag
     * @return operation instance reference to allow method chaining
     */
    CreateRegistrar& set_internal(bool value);

    /**
     * Executes create
     * @param ctx contains reference to database and logging interface
     * @return registrar id
     */
    unsigned long long exec(const OperationContext& ctx);

    /**
     * Dumps state of the instance into the string
     * @return string with description of the instance state
     */
    std::string to_string() const;
protected:
    const std::string& get_handle()const;
private:
    std::string handle_;/**< registrar identifier */
    std::string name_;/**< name of the registrar */
    std::string organization_;/**< full trade name of organization */
    std::vector<std::string> street_;/**< part of address */
    std::string city_;/**< part of address - city */
    Optional<std::string> stateorprovince_;/**< part of address - region */
    std::string postalcode_;/**< part of address - postal code */
    Optional<std::string> country_;/**< two character country code or country name */
    std::string telephone_;/**<  telephone number */
    Optional<std::string> fax_;/**< fax number */
    std::string email_;/**< e-mail address */
    std::string url_;/**< web page of the registrar */
    bool system_;/**< system registrar flag */
    Optional<std::string> ico_;/**< company registration number */
    std::string dic_;/**< taxpayer identification number */
    Optional<std::string> variable_symbol_;/**< registrar payments coupling tag, have to match with payment variable symbol to couple payment with registrar*/
    Optional<std::string> payment_memo_regex_;/**< registrar payments coupling alternative to variable symbol, if payment_memo_regex is set, payment_memo have to match case insesitive with payment_memo_regex to couple payment with registrar*/
    Optional<bool> vat_payer_;/**< VAT payer flag */
    bool is_internal_;/**< internal registrar flag */
};

}//namespace LibFred

#endif
